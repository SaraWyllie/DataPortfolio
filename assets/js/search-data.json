{
  
    
        "post0": {
            "title": "Data Analysis of Jeopardy Questions",
            "content": "The goal of this project is to examine trends in Jeopardy questions using the &#39;200,000+ Jeopardy! Questions&#39; data set (source: https://www.kaggle.com/tunguz/200000-jeopardy-questions). First I clean the data by correcting the column names, removing rows with missing values, and removing rows where with audio/video clues. Following that, I examine most used categories by round over the years the data spans. . import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.ticker as ticker import seaborn as sns %matplotlib inline pd.set_option(&#39;display.max_rows&#39;, None) pd.set_option(&#39;display.max_columns&#39;, None) pd.options.display.width=None . df=pd.read_csv(&#39;JEOPARDY_CSV.csv&#39;) df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 216930 entries, 0 to 216929 Data columns (total 7 columns): Show Number 216930 non-null int64 Air Date 216930 non-null object Round 216930 non-null object Category 216930 non-null object Value 216930 non-null object Question 216930 non-null object Answer 216928 non-null object dtypes: int64(1), object(6) memory usage: 11.6+ MB . data cleaning . df.columns = [x.strip() for x in df.columns] # remove dollar sign and commas from value column, convert none values to NaN, change all to integers df[&#39;Value&#39;] = df[&#39;Value&#39;].str.replace(&quot;$&quot;, &#39;&#39;) df[&#39;Value&#39;] = df[&#39;Value&#39;].str.replace(&quot;,&quot;, &#39;&#39;) df[&#39;Value&#39;] = df[&#39;Value&#39;].replace(&quot;None&quot;,np.nan).fillna(0).astype(int) . The show number does not provide any useful information so I drop that column. . df.drop(&#39;Show Number&#39;, inplace=True, axis=1) . Next I check for any rows containing null values. As there are only two such rows out of the 216,928 rows I simply drop them. I also check for any irregularities in the questions column and drop any rows where the question is listed as an audio or video clue or as filler, as they again make up a miniscule portion of the data. This will leave only rows that contain both questions and their answers. . df.isnull().sum() . Air Date 0 Round 0 Category 0 Value 0 Question 0 Answer 2 dtype: int64 . df[df[&#39;Answer&#39;].isnull()] . Air Date Round Category Value Question Answer . 94817 | 2003-06-23 | Jeopardy! | GOING &quot;N&quot;SANE | 200 | It often precedes &quot;and void&quot; | NaN | . 143297 | 2011-06-21 | Double Jeopardy! | NOTHING | 400 | This word for &quot;nothing&quot; precedes &quot;and void&quot; to... | NaN | . df.drop(df.index[[94817, 143297]], inplace=True) . df[&#39;Question&#39;].value_counts().head(10) . [audio clue] 17 [video clue] 14 (audio clue) 5 [filler] 5 Greenland 4 Hainan 4 Abigail Smith 4 &#34;A watched pot never&#34; does this 3 Howard 3 1861-1865 3 Name: Question, dtype: int64 . aud1=df[df[&#39;Question&#39;]==&#39;[audio clue]&#39;] aud2=df[df[&#39;Question&#39;]==&#39;(audio clue)&#39;] vid=df[df[&#39;Question&#39;]==&#39;[video clue]&#39;] filler=df[df[&#39;Question&#39;]==&#39;[filler]&#39;] df.drop(aud1.index, inplace=True) df.drop(aud2.index, inplace=True) df.drop(vid.index, inplace=True) df.drop(filler.index, inplace=True) . Finally I convert the date column to timeStamps and extract the year to its own column for convenience. . df[&#39;Air Date&#39;]=pd.to_datetime(df[&#39;Air Date&#39;], format=&#39;%Y-%m-%d&#39;) . def get_year (date_val): return (date_val).year df[&#39;Year&#39;]=df[&#39;Air Date&#39;].apply(get_year) . Plots . Now that the data is organized, I will examine the popularity of different categories. The first chart shows the 10 categories with the most questions from all years in the dataset for each of the possible rounds. For these years the choice of Jeopardy! questions. This shows that Before &amp; After was the most used category both overall and in the Double Jeopardy! round. . sns.set(rc={&#39;figure.figsize&#39;:(10,6)}) ax=sns.countplot(x=&#39;Category&#39;, data=df, hue=&#39;Round&#39;,order=df[&#39;Category&#39;].value_counts().head(10).index, palette=&#39;mako&#39;) ax.set_title(&#39;Most Common Categories by Round&#39;) ax.set_xlabel(&#39;Category&#39;) ax.set_ylabel(&#39;# of Appearances&#39;) plt.xticks(rotation=45, ha=&#39;right&#39;) plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) plt.tight_layout() . We now explore the categories with the most appearances in each of the two main rounds. In the Jeopardy! round we see a three-way tie between &#39;Stupid Answers&#39;, &#39;Potpourri&#39;, and &#39;Sports.&#39; The gap between the three most used and the 10th is 70 questions. . df_r1=df[df[&#39;Round&#39;]==&#39;Jeopardy!&#39;] df_r2=df[df[&#39;Round&#39;]==&#39;Double Jeopardy!&#39;] . df_r1[&#39;Category&#39;].value_counts().head(10) . POTPOURRI 255 STUPID ANSWERS 255 SPORTS 253 ANIMALS 233 AMERICAN HISTORY 227 SCIENCE 217 STATE CAPITALS 210 TELEVISION 200 U.S. CITIES 195 BUSINESS &amp; INDUSTRY 185 Name: Category, dtype: int64 . ax=sns.countplot(x=&#39;Category&#39;, data=df_r1, order=df_r1[&#39;Category&#39;].value_counts().head(10).index, color=&#39;b&#39;) ax.set_title(&#39;Jeopardy!&#39;) ax.set_xlabel(&#39;Category&#39;) ax.set_ylabel(&#39;# of Appearances&#39;) plt.xticks(rotation=45, ha=&#39;right&#39;) plt.tight_layout() . df_stupid=df[df[&#39;Category&#39;]==&#39;STUPID ANSWERS&#39;] df_bf=df[df[&#39;Category&#39;]==&#39;BEFORE &amp; AFTER&#39;] df_po=df[df[&#39;Category&#39;]==&#39;POTPOURRI&#39;] df_sp=df[df[&#39;Category&#39;]==&#39;SPORTS&#39;] . sns.set(rc={&#39;figure.figsize&#39;:(10,10)}) fig, ax=plt.subplots(3,1) ax1=sns.countplot(df_stupid[&#39;Year&#39;], ax=ax[0], color=&#39;b&#39;) ax2=sns.countplot(df_po[&#39;Year&#39;], ax=ax[1], color=&#39;r&#39;) ax3=sns.countplot(df_sp[&#39;Year&#39;], ax=ax[2], color=&#39;g&#39;) #for i in range(ax.shape[0]): # ax[i].xaxis.set_major_locator(plt.MaxNLocator(12)) ax1.set_ylabel(&#39;# of Appearances&#39;) ax2.set_ylabel(&#39;# of Appearances&#39;) ax3.set_ylabel(&#39;# of Appearances&#39;) ax1.set_title(&#39;Stupid Answers&#39;) ax2.set_title(&#39;Potpurri&#39;) ax3.set_title(&#39;Sports&#39;) plt.tight_layout(); . From these figures we see that the &#39;Sports&#39; category had the two highest yearly counts out of all three categories. These occured in 1997 and 1998 but otherwise was the least used of the three. This could be a greater interest in sports in those years. There were, for example, several sports scandals in 1997 (Mike Tyson, Dennis Rodman). &#39;Potpourri&#39; had the most consistent number of questions throughout the time period. It would seem that contestants should always be prepared for questions from this category. . Next, I plot the 10 most used categories for the time period in the Double Jeopardy! round. Here there is a difference of 200 questions between the most used, &#39;Before &amp; After,&#39; and the tenth most used. At first glance this would led one to believe that &#39;Before &amp; After&#39; is the most likely category to be encountered in a game of Jeopardy. However, let&#39;s look at how its popularity has changed over the time period. . df_r2[&#39;Category&#39;].value_counts().head() . BEFORE &amp; AFTER 450 LITERATURE 381 SCIENCE 296 WORLD GEOGRAPHY 254 OPERA 250 Name: Category, dtype: int64 . sns.set(rc={&#39;figure.figsize&#39;:(6,6)}) ax=sns.countplot(x=&#39;Category&#39;, data=df_r2, order=df_r2[&#39;Category&#39;].value_counts().head(10).index, color=&#39;r&#39;) ax.set_title(&#39;Double Jeopardy!&#39;) ax.set_xlabel(&#39;Category&#39;) ax.set_ylabel(&#39;# of Appearances&#39;) plt.xticks(rotation=45, ha=&#39;right&#39;) plt.tight_layout() . . Plotting the number of &#39;Before &amp; After&#39; questions by year shows a peak in 1999 but a consistent decline in usage from then until the end of the data collection period. While still a common category it would not have ass much relevance in 2011 as it did in the few years surrounding 1999.s . sns.set(rc={&#39;figure.figsize&#39;:(8,6)}) ax=sns.countplot(df_bf[&#39;Year&#39;], color=&#39;r&#39;) ax.set_ylabel(&#39;# of Appearances&#39;) ax.set_title(&#39;Before &amp; After&#39;) plt.tight_layout() .",
            "url": "https://sarawyllie.github.io/DataPortfolio/2021/08/18/Jeopardy.html",
            "relUrl": "/2021/08/18/Jeopardy.html",
            "date": " • Aug 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sarawyllie.github.io/DataPortfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sarawyllie.github.io/DataPortfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sarawyllie.github.io/DataPortfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sarawyllie.github.io/DataPortfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}